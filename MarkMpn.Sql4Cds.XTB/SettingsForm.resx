<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        jSqypt1fX//IvIXtOoUyQJuQa4qWlE6MTpDujiSJIqe2UIrrDLyWcKEwJKCQEeD4By76zgM3nmTtrQbQ
        +Zyem1fWr2VBhxZ33ni/KtvmMPnsgse279ytYy+y5JatW/Mfnc9+grik9Pfee2/f/gba037QJJIiRgby
        BHZYEgZSF4Z8GxiFnkY+NL4s6wnvfAaNdClceJLZXm/g6XmV/VsX9h1428DB1oZh4+Zts/Pzx0dGaYej
        4uLffudERIxPXakHja1pjx0/npKe8emnn6o3Tp9At7QqqZBgt6qc3j+msRJSme5sUgRz4gkN67d9S33W
        gHzvh27QbM3hneQlO5yTbNCRfjonP++eWe06efekVqRvKVpu285nsqZM5Tzr6kyaMvXga4f180gf0gsX
        l+zduy8hOeWB0WP++te/0hWJpl/UFLwjjWEXSYsFXQVF5cHEE5uQuL7ubGLfub7Q+OAJg9A7Z1vtR5XV
        1ePCI9xpBV9K6tGDx/v0u9XWUg8m1z+1qfCxeU0nIio6O2fanz75ROf8pb37ImJidS1ifb6zZ89aujXp
        dgtk4gn8d1qCFLsk7sIQFCJNUpA57N6I/Dkf5I560tdnlv9vOXzBd7VOsj9UMWnNZ+c+f2jsOBsVaJit
        23csK6vgzrTK0oX0rJyGVw5wDxs/NSPzwMHXEpNTNa22vXjpsl3P7GGraM9GUNs2EQqEwA4DSOaxtck3
        E49kjz43+VLnF+b9pq74rbz71+pG9f6dKTTWFxonqWfyjvV/euLxA6cO79y+a+fYieHWukE35ysHDiwo
        XtqyXWdqSgo6tyXLq/bu3x+UpSEl7bl95BdvDBji/YscWW5vJt2Q0PSU1jxMZTO7hUyaB/y4baeQ7r0f
        GjO2bt0rm/3/brZ6/utV0zaXZdScfvfko4/P/+Wvfrn72WesYx1sbbUdb7WuPTx48FBkbBIXlOIxvjTd
        pTq3RkMx86Fx41evWbugaKn73LZ0d6uC/N6XFg8xxmNmwah4CIFret048M7hA+4YNuiu4QPvuOfqzj0U
        FS5vE3LHnT9NSo5/ZP7itRs2HTx8OCk1/cGx4ziW6jImIWHNE3X7GxpW1KzSQ8gGiPclHT16LCYhpWW7
        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
        /w/8fxutOvwPHAnkbuvmv/8AAAAASUVORK5CYII=
</value>
  </data>
  <data name="nativeSqlScintilla.Text" xml:space="preserve">
    <value>select
"account0".Name as "name"
, "account0".Telephone1 as "telephone1"
, "account0".OwnerIdName as "owneridname"
, "account0".OwnerId as "ownerid"
, "account0".OwnerIdType as "owneridtype"
, "account0".OwnerIdYomiName as "owneridyominame"
from
 Account as "account0"</value>
  </data>
</root>