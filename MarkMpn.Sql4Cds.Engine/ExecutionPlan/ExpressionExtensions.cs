using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using MarkMpn.Sql4Cds.Engine.Visitors;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.SqlServer.TransactSql.ScriptDom;
using Microsoft.Xrm.Sdk;

namespace MarkMpn.Sql4Cds.Engine.ExecutionPlan
{
    /// <summary>
    /// Converts ScriptDom expressions to compiled functions and checks the types of values that will be generated
    /// </summary>
    static class ExpressionExtensions
    {
        /// <summary>
        /// Gets the type of value that will be generated by an expression
        /// </summary>
        /// <param name="expr">The expression to get the type of</param>
        /// <param name="schema">The schema of the node that the expression will be evaluated in the context of</param>
        /// <param name="nonAggregateSchema">For aggregate queries, the schema of the data prior to applying the aggregation</param>
        /// <param name="parameterTypes">A mapping of parameter names to their types that are available to the expression</param>
        /// <param name="sqlType">The SQL data type that will be returned</param>
        /// <returns>The type of value that will be returned by the expression</returns>
        public static Type GetType(this TSqlFragment expr, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, out DataTypeReference sqlType)
        {
            var entityParam = Expression.Parameter(typeof(Entity));
            var parameterParam = Expression.Parameter(typeof(IDictionary<string, object>));
            var optionsParam = Expression.Parameter(typeof(IQueryExecutionOptions));

            var expression = ToExpression(expr, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            return expression.Type;
        }

        /// <summary>
        /// Compiles an expression to a function
        /// </summary>
        /// <param name="expr">The expression to be compiled</param>
        /// <param name="schema">The schema of the node that the expression will be evaluated in the context of</param>
        /// <param name="parameterTypes">A mapping of parameter names to their types that are available to the expression</param>
        /// <returns>A function that accepts a <see cref="Entity"/> representing the data values of a record, a <see cref="IDictionary{string, object}"/> holding parameter values and an <see cref="IQueryExecutionOptions"/> defining how the query should be run and returns the value of the expression</returns>
        public static Func<Entity, IDictionary<string, object>, IQueryExecutionOptions, object> Compile(this TSqlFragment expr, INodeSchema schema, IDictionary<string, DataTypeReference> parameterTypes)
        {
            var entityParam = Expression.Parameter(typeof(Entity));
            var parameterParam = Expression.Parameter(typeof(IDictionary<string, object>));
            var optionsParam = Expression.Parameter(typeof(IQueryExecutionOptions));

            var expression = ToExpression(expr, schema, null, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            expression = Expr.Box(expression);

            return Expression.Lambda<Func<Entity, IDictionary<string, object>, IQueryExecutionOptions, object>>(expression, entityParam, parameterParam, optionsParam).Compile();
        }

        /// <summary>
        /// Compiles a boolean expression to a function
        /// </summary>
        /// <param name="b">The expression to be compiled</param>
        /// <param name="schema">The schema of the node that the expression will be evaluated in the context of</param>
        /// <param name="parameterTypes">A mapping of parameter names to their types that are available to the expression</param>
        /// <returns>A function that accepts a <see cref="Entity"/> representing the data values of a record, a <see cref="IDictionary{string, object}"/> holding parameter values and an <see cref="IQueryExecutionOptions"/> defining how the query should be run and returns the value of the expression</returns>
        public static Func<Entity, IDictionary<string, object>, IQueryExecutionOptions, bool> Compile(this BooleanExpression b, INodeSchema schema, IDictionary<string, DataTypeReference> parameterTypes)
        {
            var entityParam = Expression.Parameter(typeof(Entity));
            var parameterParam = Expression.Parameter(typeof(IDictionary<string, object>));
            var optionsParam = Expression.Parameter(typeof(IQueryExecutionOptions));

            var expression = ToExpression(b, schema, null, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            expression = Expression.IsTrue(expression);
            return Expression.Lambda<Func<Entity, IDictionary<string, object>, IQueryExecutionOptions, bool>>(expression, entityParam, parameterParam, optionsParam).Compile();
        }

        private static Expression ToExpression(this TSqlFragment expr, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            if (expr is ColumnReferenceExpression col)
                return ToExpression(col, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is IdentifierLiteral guid)
                return ToExpression(guid, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is IntegerLiteral i)
                return ToExpression(i, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is MoneyLiteral money)
                return ToExpression(money, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is NullLiteral n)
                return ToExpression(n, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is NumericLiteral num)
                return ToExpression(num, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is RealLiteral real)
                return ToExpression(real, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is StringLiteral str)
                return ToExpression(str, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is OdbcLiteral odbc)
                return ToExpression(odbc, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is BooleanBinaryExpression boolBin)
                return ToExpression(boolBin, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is BooleanComparisonExpression cmp)
                return ToExpression(cmp, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is BooleanParenthesisExpression boolParen)
                return ToExpression(boolParen, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is InPredicate inPred)
                return ToExpression(inPred, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is BooleanIsNullExpression isNull)
                return ToExpression(isNull, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is LikePredicate like)
                return ToExpression(like, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is BooleanNotExpression not)
                return ToExpression(not, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is FullTextPredicate fullText)
                return ToExpression(fullText, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is Microsoft.SqlServer.TransactSql.ScriptDom.BinaryExpression bin)
                return ToExpression(bin, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is FunctionCall func)
                return ToExpression(func, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is ParenthesisExpression paren)
                return ToExpression(paren, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is Microsoft.SqlServer.TransactSql.ScriptDom.UnaryExpression unary)
                return ToExpression(unary, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is VariableReference var)
                return ToExpression(var, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is SimpleCaseExpression simpleCase)
                return ToExpression(simpleCase, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is SearchedCaseExpression searchedCase)
                return ToExpression(searchedCase, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is ConvertCall convert)
                return ToExpression(convert, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is CastCall cast)
                return ToExpression(cast, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is ParameterlessCall parameterless)
                return ToExpression(parameterless, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else if (expr is GlobalVariableExpression global)
                return ToExpression(global, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            else
                throw new NotSupportedQueryFragmentException("Unhandled expression type", expr);
        }

        private static Expression ToExpression(ColumnReferenceExpression col, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            var name = col.GetColumnName();

            if (schema == null || !schema.ContainsColumn(name, out var normalizedName))
            {
                if (schema == null || !schema.Aliases.TryGetValue(name, out var normalized))
                {
                    if (nonAggregateSchema != null && nonAggregateSchema.ContainsColumn(name, out _))
                        throw new NotSupportedQueryFragmentException("Column is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause", col);

                    var ex = new NotSupportedQueryFragmentException("Unknown column", col);

                    if (col.MultiPartIdentifier.Identifiers.Count == 1 && col.MultiPartIdentifier.Identifiers[0].QuoteType == QuoteType.DoubleQuote)
                        ex.Suggestion = $"Did you mean '{name}'?";
                    else if (name.Equals("false", StringComparison.OrdinalIgnoreCase))
                        ex.Suggestion = "Did you mean '0'?";
                    else if (name.Equals("true", StringComparison.OrdinalIgnoreCase))
                        ex.Suggestion = "Did you mean '1'?";

                    throw ex;
                }

                throw new NotSupportedQueryFragmentException("Ambiguous column reference", col)
                {
                    Suggestion = $"Did you mean:\r\n{String.Join("\r\n", normalized.Select(c => $"* {c}"))}"
                };
            }

            sqlType = schema.Schema[normalizedName];
            var expr = Expression.Property(entityParam, typeof(Entity).GetCustomAttribute<DefaultMemberAttribute>().MemberName, Expression.Constant(normalizedName));
            return Expression.Convert(expr, sqlType.ToNetType(out _));
        }

        private static Expression ToExpression(IdentifierLiteral guid, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.UniqueIdentifier };
            return Expression.Constant(new SqlGuid(guid.Value));
        }

        private static Expression ToExpression(IntegerLiteral i, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Int };
            return Expression.Constant(new SqlInt32(Int32.Parse(i.Value, CultureInfo.InvariantCulture)));
        }

        private static Expression ToExpression(MoneyLiteral money, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Money };
            return Expression.Constant(new SqlMoney(Decimal.Parse(money.Value, CultureInfo.InvariantCulture)));
        }

        private static Expression ToExpression(NullLiteral n, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Int };
            return Expression.Constant(null);
        }

        private static Expression ToExpression(NumericLiteral num, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Decimal };
            return Expression.Constant(new SqlDecimal(Decimal.Parse(num.Value, CultureInfo.InvariantCulture)));
        }

        private static Expression ToExpression(RealLiteral real, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Float };
            return Expression.Constant(new SqlSingle(Single.Parse(real.Value, CultureInfo.InvariantCulture)));
        }

        private static Expression ToExpression(StringLiteral str, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.NVarChar, Parameters = { new IntegerLiteral { Value = str.Value.Length.ToString(CultureInfo.InvariantCulture) } } };
            return Expression.Constant(new SqlString(str.Value, CultureInfo.CurrentCulture.LCID, SqlCompareOptions.IgnoreCase | SqlCompareOptions.IgnoreNonSpace));
        }

        private static Expression ToExpression(OdbcLiteral odbc, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            switch (odbc.OdbcLiteralType)
            {
                case OdbcLiteralType.Date:
                    sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Date };
                    return Expression.Constant(new SqlDateTime(DateTime.ParseExact(odbc.Value, "yyyy'-'MM'-'dd", CultureInfo.CurrentCulture, DateTimeStyles.None)));

                case OdbcLiteralType.Timestamp:
                    sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.DateTime };
                    return Expression.Constant(new SqlDateTime(DateTime.ParseExact(odbc.Value, "yyyy'-'MM'-'dd HH':'mm':'ss", CultureInfo.CurrentCulture, DateTimeStyles.None)));

                case OdbcLiteralType.Guid:
                    sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.UniqueIdentifier };
                    return Expression.Constant(new SqlGuid(odbc.Value));

                default:
                    throw new NotSupportedQueryFragmentException("Unknown literal type", odbc);
            }
        }

        private static Expression ToExpression(BooleanComparisonExpression cmp, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            // Special case for field = func() where func is defined in FetchXmlConditionMethods
            if (cmp.FirstExpression is ColumnReferenceExpression &&
                cmp.ComparisonType == BooleanComparisonType.Equals &&
                cmp.SecondExpression is FunctionCall func
                )
            {
                var parameters = func.Parameters.Select(p =>
                {
                    var paramExpr = p.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out var paramType);
                    return new KeyValuePair<Expression, DataTypeReference>(paramExpr, paramType);
                }).ToList();
                var colExpr = cmp.FirstExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out var colType);
                parameters.Insert(0, new KeyValuePair<Expression, DataTypeReference>(colExpr, colType));
                var paramTypes = parameters.Select(p => p.Value).ToArray();
                var paramExpressions = parameters.Select(p => p.Key).ToArray();

                var fetchXmlComparison = GetMethod(typeof(FetchXmlConditionMethods), func, paramTypes, false, optionsParam, ref paramExpressions, out sqlType);

                if (fetchXmlComparison != null)
                    return Expr.Call(fetchXmlComparison, paramExpressions);
            }

            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Bit };

            var lhs = cmp.FirstExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            var rhs = cmp.SecondExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            if (!SqlTypeConverter.CanMakeConsistentTypes(lhs.Type, rhs.Type, out var type))
            {
                // Special case - we can filter on entity reference types by string
                if (lhs.Type == typeof(SqlEntityReference) && rhs.Type == typeof(SqlString) ||
                    lhs.Type == typeof(SqlString) && rhs.Type == typeof(SqlEntityReference))
                {
                    type = typeof(SqlGuid);
                }
                else
                {
                    throw new NotSupportedQueryFragmentException($"No implicit conversion exists for types {lhs.Type.Name} and {rhs.Type.Name}", cmp);
                }
            }

            if (lhs.Type != type)
                lhs = SqlTypeConverter.Convert(lhs, type);

            if (rhs.Type != type)
            {
                // Special case to give more helpful & earlier error reporting for common problems
                if (cmp.FirstExpression is ColumnReferenceExpression col &&
                    cmp.SecondExpression is StringLiteral str &&
                    (
                        type == typeof(SqlInt32) && !Int32.TryParse(str.Value, out _)
                        ||
                        type == typeof(SqlGuid) && !Guid.TryParse(str.Value, out _)
                    ) &&
                    schema.ContainsColumn(col.GetColumnName() + "name", out var nameCol))
                {
                    throw new NotSupportedQueryFragmentException($"Cannot convert text value to {type.Name}", str)
                    {
                        Suggestion = $"Did you mean to filter on the {nameCol} column instead?\r\n" + new string(' ', 26 + nameCol.Length) + "^^^^"
                    };
                }

                rhs = SqlTypeConverter.Convert(rhs, type);
            }

            switch (cmp.ComparisonType)
            {
                case BooleanComparisonType.Equals:
                    return Expression.Equal(lhs, rhs);

                case BooleanComparisonType.GreaterThan:
                    return Expression.GreaterThan(lhs, rhs);

                case BooleanComparisonType.GreaterThanOrEqualTo:
                case BooleanComparisonType.NotLessThan:
                    return Expression.GreaterThanOrEqual(lhs, rhs);

                case BooleanComparisonType.LessThan:
                    return Expression.LessThan(lhs, rhs);

                case BooleanComparisonType.LessThanOrEqualTo:
                case BooleanComparisonType.NotGreaterThan:
                    return Expression.LessThanOrEqual(lhs, rhs);

                case BooleanComparisonType.NotEqualToBrackets:
                case BooleanComparisonType.NotEqualToExclamation:
                    return Expression.NotEqual(lhs, rhs);

                default:
                    throw new NotSupportedQueryFragmentException("Unknown comparison type", cmp);
            }
        }

        private static Expression ToExpression(BooleanBinaryExpression bin, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Bit };

            var lhs = bin.FirstExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            var rhs = bin.SecondExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            if (bin.BinaryExpressionType == BooleanBinaryExpressionType.And)
                return Expression.AndAlso(lhs, rhs);

            return Expression.OrElse(lhs, rhs);
        }

        private static Expression ToExpression(BooleanParenthesisExpression paren, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            return paren.Expression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
        }

        private static Expression ToExpression(Microsoft.SqlServer.TransactSql.ScriptDom.BinaryExpression bin, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            var lhs = bin.FirstExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out var lhsSqlType);
            var rhs = bin.SecondExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out var rhsSqlType);

            if (!SqlTypeConverter.CanMakeConsistentTypes(lhs.Type, rhs.Type, out var type))
                throw new NotSupportedQueryFragmentException($"No implicit conversion exists for types {lhs.Type} and {rhs.Type}", bin);

            if (lhs.Type != type)
                lhs = SqlTypeConverter.Convert(lhs, type);

            if (rhs.Type != type)
                rhs = SqlTypeConverter.Convert(rhs, type);

            sqlType = null;
            Expression expr;

            switch (bin.BinaryExpressionType)
            {
                case BinaryExpressionType.Add:
                    // Special case for SqlDateTime
                    if (lhs.Type == typeof(SqlDateTime) && rhs.Type == typeof(SqlDateTime))
                        expr = Expr.Call(() => AddSqlDateTime(Expr.Arg<SqlDateTime>(), Expr.Arg<SqlDateTime>()), lhs, rhs);
                    else
                        expr = Expression.Add(lhs, rhs);

                    // Special case for SqlString length calculation
                    if (lhsSqlType is SqlDataTypeReference lhsSql &&
                        rhsSqlType is SqlDataTypeReference rhsSql &&
                        lhs.Type == typeof(SqlString) &&
                        rhs.Type == typeof(SqlString) &&
                        lhsSql.Parameters.Count == 1 &&
                        rhsSql.Parameters.Count == 1 &&
                        lhsSql.Parameters[0].LiteralType == LiteralType.Integer &&
                        rhsSql.Parameters[0].LiteralType == LiteralType.Integer &&
                        Int32.TryParse(lhsSql.Parameters[0].Value, out var lhsLength) &&
                        Int32.TryParse(rhsSql.Parameters[0].Value, out var rhsLength))
                    {
                        sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.NVarChar, Parameters = { new IntegerLiteral { Value = (lhsLength + rhsLength).ToString(CultureInfo.InvariantCulture) } } };
                    }
                    break;

                case BinaryExpressionType.Subtract:
                    // Special case for SqlDateTime
                    if (lhs.Type == typeof(SqlDateTime) && rhs.Type == typeof(SqlDateTime))
                        expr = Expr.Call(() => SubtractSqlDateTime(Expr.Arg<SqlDateTime>(), Expr.Arg<SqlDateTime>()), lhs, rhs);
                    else
                        expr = Expression.Subtract(lhs, rhs);
                    break;

                case BinaryExpressionType.Multiply:
                    expr = Expression.Multiply(lhs, rhs);
                    break;

                case BinaryExpressionType.Divide:
                    expr = Expression.Divide(lhs, rhs);
                    break;

                case BinaryExpressionType.Modulo:
                    expr = Expression.Modulo(lhs, rhs);
                    break;

                case BinaryExpressionType.BitwiseAnd:
                    expr = Expression.And(lhs, rhs);
                    break;

                case BinaryExpressionType.BitwiseOr:
                    expr = Expression.Or(lhs, rhs);
                    break;

                case BinaryExpressionType.BitwiseXor:
                    expr = Expression.ExclusiveOr(lhs, rhs);
                    break;

                default:
                    throw new NotSupportedQueryFragmentException("Unknown operator", bin);
            }

            if (sqlType == null)
                sqlType = expr.Type.ToSqlType();

            return expr;
        }

        private static SqlDateTime AddSqlDateTime(SqlDateTime lhs, SqlDateTime rhs)
        {
            if (lhs.IsNull || rhs.IsNull)
                return SqlDateTime.Null;

            // Convert the second value to the TimeSpan difference between 1900-01-01 and the given value first
            var ts = rhs.Value - new DateTime(1900, 1, 1);
            return lhs + ts;
        }

        private static SqlDateTime SubtractSqlDateTime(SqlDateTime lhs, SqlDateTime rhs)
        {
            if (lhs.IsNull || rhs.IsNull)
                return SqlDateTime.Null;

            // Convert the second value to the TimeSpan difference between 1900-01-01 and the given value first
            var ts = rhs.Value - new DateTime(1900, 1, 1);
            return lhs - ts;
        }

        private static MethodInfo GetMethod(FunctionCall func, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out Expression[] paramExpressions, out DataTypeReference sqlType)
        {
            KeyValuePair<Expression, DataTypeReference>[] paramExpressionsWithType;

            // Special case for DATEPART / DATEDIFF / DATEADD - first parameter looks like a field but is actually an identifier
            if (func.FunctionName.Value.Equals("DATEPART", StringComparison.OrdinalIgnoreCase) ||
                func.FunctionName.Value.Equals("DATEDIFF", StringComparison.OrdinalIgnoreCase) ||
                func.FunctionName.Value.Equals("DATEADD", StringComparison.OrdinalIgnoreCase))
            {
                paramExpressionsWithType = func.Parameters
                    .Select((param, index) =>
                    {
                        if (index == 0)
                        {
                            // Check parameter is an expected datepart value
                            if (!(param is ColumnReferenceExpression col))
                                throw new NotSupportedQueryFragmentException("Expected a datepart name", param);

                            try
                            {
                                ExpressionFunctions.DatePartToInterval(col.MultiPartIdentifier.Identifiers.Single().Value);
                            }
                            catch
                            {
                                throw new NotSupportedQueryFragmentException("Expected a datepart name", param);
                            }

                            return new KeyValuePair<Expression, DataTypeReference>(Expression.Constant(col.MultiPartIdentifier.Identifiers.Single().Value), new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.NVarChar, Parameters = { new IntegerLiteral { Value = col.MultiPartIdentifier.Identifiers.Single().Value.Length.ToString(CultureInfo.InvariantCulture) } } });
                        }

                        var paramExpr = param.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out var paramType);
                        return new KeyValuePair<Expression, DataTypeReference>(paramExpr, paramType);
                    })
                    .ToArray();
            }
            else
            {
                paramExpressionsWithType = func.Parameters
                    .Select(param =>
                    {
                        var paramExpr = param.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out var paramType);
                        return new KeyValuePair<Expression, DataTypeReference>(paramExpr, paramType);
                    })
                    .ToArray();
            }

            paramExpressions = paramExpressionsWithType
                .Select(kvp => kvp.Key)
                .ToArray();

            return GetMethod(typeof(ExpressionFunctions), func, paramExpressionsWithType.Select(kvp => kvp.Value).ToArray(), true, optionsParam, ref paramExpressions, out sqlType);
        }

        private static MethodInfo GetMethod(Type targetType, FunctionCall func, DataTypeReference[] paramTypes, bool throwOnMissing, Expression optionsParam, ref Expression[] paramExpressions, out DataTypeReference sqlType)
        {
            // Find a method that implements this function
            var methods = targetType
                .GetMethods(BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static)
                .Where(m => m.Name.Equals(func.FunctionName.Value, StringComparison.OrdinalIgnoreCase))
                .ToList();

            if (methods.Count == 0)
            {
                if (throwOnMissing)
                    throw new NotSupportedQueryFragmentException("Unknown function", func);

                sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Int };
                return null;
            }

            // Check parameter count is correct
            var correctParameterCount = methods
                .Select(m => new { Method = m, Parameters = m.GetParameters() })
                .Where(m => 
                    m.Parameters.Length == paramTypes.Length ||
                    (m.Parameters.Length < paramTypes.Length && m.Parameters.Length > 0 && m.Parameters.Last().ParameterType.IsArray) ||
                    (m.Parameters.Length == paramTypes.Length + 1 && m.Parameters.Last().ParameterType == typeof(IQueryExecutionOptions))
                    )
                .ToList();

            if (correctParameterCount.Count == 0)
                throw new NotSupportedQueryFragmentException($"Method expects {methods[0].GetParameters().Length} parameters", func);

            if (correctParameterCount.Count > 1)
                throw new NotSupportedQueryFragmentException("Ambiguous method", func);

            var method = correctParameterCount[0].Method;
            var parameters = correctParameterCount[0].Parameters;

            if (correctParameterCount[0].Method.IsGenericMethodDefinition)
            {
                // Create the generic method based on the type of the generic arguments
                var genericArguments = correctParameterCount[0].Method.GetGenericArguments();
                var genericArgumentValues = new Type[genericArguments.Length];

                foreach (var param in correctParameterCount[0].Parameters)
                {
                    for (var i = 0; i < genericArguments.Length; i++)
                    {
                        if (param.ParameterType == genericArguments[i] && genericArgumentValues[i] == null)
                            genericArgumentValues[i] = paramTypes[i].ToNetType(out _);
                    }
                }

                method = method.MakeGenericMethod(genericArgumentValues);
                parameters = method.GetParameters();
            }

            sqlType = method.ReturnType.ToSqlType();

            if (method.ReturnType == typeof(SqlString))
            {
                // Work out precise type from parameter with [MaxLength] attribute where available
                for (var i = 0; i < parameters.Length; i++)
                {
                    if (parameters[i].GetCustomAttribute<MaxLengthAttribute>() != null)
                    {
                        if (parameters[i].ParameterType == typeof(SqlInt32) && paramExpressions[i] is ConstantExpression lengthConst && lengthConst.Value is SqlInt32 length && !length.IsNull)
                            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.NVarChar, Parameters = { new IntegerLiteral { Value = length.Value.ToString(CultureInfo.InvariantCulture) } } };
                        else if (parameters[i].ParameterType == typeof(SqlString) && paramTypes[i].ToNetType(out var sqlStringType) == typeof(SqlString))
                            sqlType = paramTypes[i];

                        break;
                    }
                }
            }

            // Check parameter types can be converted
            var paramOffset = targetType == typeof(FetchXmlConditionMethods) ? 1 : 0;

            for (var i = 0; i < parameters.Length; i++)
            {
                var paramType = parameters[i].ParameterType;

                if (i == parameters.Length - 1 && paramTypes.Length >= parameters.Length && paramType.IsArray)
                    paramType = paramType.GetElementType();

                if (i == parameters.Length - 1 && paramTypes.Length < parameters.Length && paramType == typeof(IQueryExecutionOptions))
                {
                    var paramsWithOptions = new Expression[paramExpressions.Length + 1];
                    paramExpressions.CopyTo(paramsWithOptions, 0);
                    paramsWithOptions[paramExpressions.Length] = optionsParam;
                    paramExpressions = paramsWithOptions;
                    break;
                }

                if (!SqlTypeConverter.CanChangeTypeImplicit(paramTypes[i].ToNetType(out _), paramType))
                    throw new NotSupportedQueryFragmentException($"Cannot convert {paramTypes[i]} to {paramType}", i < paramOffset ? func : func.Parameters[i - paramOffset]);
            }

            for (var i = parameters.Length; i < paramTypes.Length; i++)
            {
                var paramType = parameters.Last().ParameterType.GetElementType();

                if (!SqlTypeConverter.CanChangeTypeImplicit(paramTypes[i].ToNetType(out _), paramType))
                    throw new NotSupportedQueryFragmentException($"Cannot convert {paramTypes[i]} to {paramType}", i < paramOffset ? func : func.Parameters[i - paramOffset]);
            }

            return method;
        }

        private static Expression ToExpression(this FunctionCall func, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            if (func.OverClause != null)
                throw new NotSupportedQueryFragmentException("Window functions are not supported", func);

            // Find the method to call and get the expressions for the parameter values
            var method = GetMethod(func, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out var paramValues, out sqlType);

            // Convert the parameters to the expected types
            var parameters = method.GetParameters();

            for (var i = 0; i < parameters.Length; i++)
            {
                if (paramValues[i].Type != parameters[i].ParameterType)
                    paramValues[i] = SqlTypeConverter.Convert(paramValues[i], parameters[i].ParameterType);
            }

            return Expression.Call(method, paramValues);
        }

        private static Expression ToExpression(this ParenthesisExpression paren, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            return paren.Expression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
        }

        private static Expression ToExpression(this Microsoft.SqlServer.TransactSql.ScriptDom.UnaryExpression unary, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            var value = unary.Expression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            
            switch (unary.UnaryExpressionType)
            {
                case UnaryExpressionType.Positive:
                    return Expression.UnaryPlus(value);

                case UnaryExpressionType.Negative:
                    return Expression.Negate(value);

                case UnaryExpressionType.BitwiseNot:
                    return Expression.Not(value);

                default:
                    throw new NotSupportedQueryFragmentException("Unknown unary operator", unary);
            }
        }

        private static Expression ToExpression(this InPredicate inPred, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            if (inPred.Subquery != null)
                throw new NotSupportedQueryFragmentException("Subquery should have been eliminated by query plan", inPred);

            var exprValue = inPred.Expression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            Expression result = null;

            foreach (var value in inPred.Values)
            {
                var comparisonValue = value.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

                if (!SqlTypeConverter.CanMakeConsistentTypes(exprValue.Type, comparisonValue.Type, out var type))
                    throw new NotSupportedQueryFragmentException($"No implicit conversion exists for types {exprValue.Type} and {comparisonValue.Type}", inPred);

                var convertedExprValue = exprValue;

                if (exprValue.Type != type)
                    convertedExprValue = SqlTypeConverter.Convert(convertedExprValue, type);

                if (comparisonValue.Type != type)
                    comparisonValue = SqlTypeConverter.Convert(comparisonValue, type);

                var comparison = inPred.NotDefined ? Expression.NotEqual(convertedExprValue, comparisonValue) : Expression.Equal(convertedExprValue, comparisonValue);

                if (result == null)
                    result = comparison;
                else
                    result = inPred.NotDefined ? Expression.AndAlso(result, comparison) : Expression.OrElse(result, comparison);
            }

            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Bit };
            return result;
        }

        private static Expression ToExpression(this VariableReference var, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            if (parameterTypes == null || !parameterTypes.TryGetValue(var.Name, out sqlType))
                throw new NotSupportedQueryFragmentException("Undefined variable", var);

            var expr = Expression.Property(parameterParam, typeof(IDictionary<string, object>).GetCustomAttribute<DefaultMemberAttribute>().MemberName, Expression.Constant(var.Name));
            return Expression.Convert(expr, sqlType.ToNetType(out _));
        }

        private static Expression ToExpression(this GlobalVariableExpression var, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            if (parameterTypes == null || !parameterTypes.TryGetValue(var.Name, out sqlType))
                throw new NotSupportedQueryFragmentException("Undefined variable", var);

            var expr = Expression.Property(parameterParam, typeof(IDictionary<string, object>).GetCustomAttribute<DefaultMemberAttribute>().MemberName, Expression.Constant(var.Name));
            return Expression.Convert(expr, sqlType.ToNetType(out _));
        }

        private static Expression ToExpression(this BooleanIsNullExpression isNull, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            var value = isNull.Expression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            value = SqlTypeConverter.NullCheck(value);

            if (isNull.IsNot)
                value = Expression.Not(value);

            value = SqlTypeConverter.Convert(value, typeof(SqlBoolean));
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Bit };
            return value;
        }

        private static Expression ToExpression(this LikePredicate like, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            var value = like.FirstExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            var pattern = like.SecondExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            var escape = like.EscapeExpression?.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Bit };

            if (value.Type != typeof(SqlString))
            {
                if (!SqlTypeConverter.CanChangeTypeImplicit(value.Type, typeof(SqlString)))
                    throw new NotSupportedQueryFragmentException("Cannot convert value to string", like.FirstExpression);

                value = SqlTypeConverter.Convert(value, typeof(SqlString));
            }

            if (pattern.Type != typeof(SqlString))
            {
                if (!SqlTypeConverter.CanChangeTypeImplicit(pattern.Type, typeof(SqlString)))
                    throw new NotSupportedQueryFragmentException("Cannot convert pattern to string", like.SecondExpression);

                pattern = SqlTypeConverter.Convert(pattern, typeof(SqlString));
            }

            if (escape != null && escape.Type != typeof(SqlString))
            {
                if (!SqlTypeConverter.CanChangeTypeImplicit(escape.Type, typeof(SqlString)))
                    throw new NotSupportedQueryFragmentException("Cannot convert escape sequence to string", like.EscapeExpression);

                escape = SqlTypeConverter.Convert(escape, typeof(SqlString));
            }

            if (escape == null)
                escape = Expression.Constant(SqlString.Null);

            if (pattern.NodeType == ExpressionType.Constant && (escape == null || escape.NodeType == ExpressionType.Constant))
            {
                // Do a one-off conversion to regex
                try
                {
                    var regex = LikeToRegex((SqlString)((ConstantExpression)pattern).Value, (SqlString)(((ConstantExpression)escape)?.Value ?? SqlString.Null));
                    return Expr.Call(() => Like(Expr.Arg<SqlString>(), Expr.Arg<Regex>(), Expr.Arg<bool>()), value, Expression.Constant(regex), Expression.Constant(like.NotDefined));
                }
                catch (ArgumentException ex)
                {
                    throw new NotSupportedQueryFragmentException(ex.Message, like.SecondExpression);
                }
            }

            return Expr.Call(() => Like(Expr.Arg<SqlString>(), Expr.Arg<SqlString>(), Expr.Arg<SqlString>(), Expr.Arg<bool>()), value, pattern, escape, Expression.Constant(like.NotDefined));
        }

        private static Regex LikeToRegex(SqlString pattern, SqlString escape)
        {
            var regexBuilder = new StringBuilder();
            regexBuilder.Append("^");

            var escaped = false;
            var inRange = false;
            var escapeChar = escape.IsNull ? '\0' : escape.Value[0];

            foreach (var ch in pattern.Value)
            {
                if (escapeChar != '\0' && ch == escapeChar)
                {
                    escaped = true;
                    continue;
                }

                if (escaped)
                {
                    regexBuilder.Append(Regex.Escape(ch.ToString()));
                    escaped = false;
                    continue;
                }

                if (ch == '[' && !inRange)
                {
                    regexBuilder.Append("[");
                    inRange = true;
                    continue;
                }

                if (ch == ']' && inRange)
                {
                    regexBuilder.Append("]");
                    inRange = false;
                    continue;
                }

                if ((ch == '^' || ch == '-') && inRange)
                {
                    regexBuilder.Append(ch);
                    continue;
                }

                if (inRange)
                {
                    regexBuilder.Append(Regex.Escape(ch.ToString()));
                    continue;
                }

                if (ch == '%')
                {
                    regexBuilder.Append(".*");
                    continue;
                }

                if (ch == '_')
                {
                    regexBuilder.Append('.');
                    continue;
                }

                regexBuilder.Append(Regex.Escape(ch.ToString()));
            }

            if (escaped || inRange)
                throw new ArgumentException("Invalid LIKE pattern");

            regexBuilder.Append("$");

            return new Regex(regexBuilder.ToString(), RegexOptions.IgnoreCase);
        }

        private static SqlBoolean Like(SqlString value, SqlString pattern, SqlString escape, bool not)
        {
            if (value.IsNull || pattern.IsNull)
                return false;

            // Convert the LIKE pattern to a regex
            var regex = LikeToRegex(pattern, escape);
            var result = regex.IsMatch(value.Value);

            if (not)
                result = !result;

            return result;
        }

        private static SqlBoolean Like(SqlString value, Regex pattern, bool not)
        {
            if (value.IsNull)
                return false;

            var result = pattern.IsMatch(value.Value);

            if (not)
                result = !result;

            return result;
        }

        private static Expression ToExpression(this SimpleCaseExpression simpleCase, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            // Convert all the different elements to expressions
            var value = simpleCase.InputExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            var whenClauses = simpleCase.WhenClauses.Select(when => when.WhenExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _)).ToList();
            var caseTypes = new Type[whenClauses.Count];
            var thenClauses = simpleCase.WhenClauses.Select(when => when.ThenExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _)).ToList();
            var elseValue = simpleCase.ElseExpression?.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            // First pass to determine final return type
            Type type = null;

            for (var i = 0; i < simpleCase.WhenClauses.Count; i++)
            {
                var whenType = whenClauses[i].Type;

                if (!SqlTypeConverter.CanMakeConsistentTypes(value.Type, whenType, out var caseType))
                    throw new NotSupportedQueryFragmentException($"Cannot compare values of type {value.Type} and {whenType}", simpleCase.WhenClauses[i].WhenExpression);

                caseTypes[i] = caseType;

                var thenType = thenClauses[i].Type;

                if (type == null)
                    type = thenType;
                else if (!SqlTypeConverter.CanMakeConsistentTypes(type, thenType, out type))
                    throw new NotSupportedQueryFragmentException($"Cannot determine return type", simpleCase);
            }

            if (elseValue != null)
            {
                var elseType = elseValue.Type;

                if (type == null)
                    type = elseType;
                else if (!SqlTypeConverter.CanMakeConsistentTypes(type, elseType, out type))
                    throw new NotSupportedQueryFragmentException($"Cannot determine return type", simpleCase);
            }

            // Second pass to build up the calculation. Do this in reverse so we can keep wrapping the previous expression in more conditions to
            // add the earlier cases
            Expression result = null;

            if (elseValue != null)
            {
                if (elseValue.Type != type)
                    elseValue = SqlTypeConverter.Convert(elseValue, type);

                result = elseValue;
            }
            else
            {
                result = Expression.Constant(SqlTypeConverter.GetNullValue(type));
            }

            for (var i = simpleCase.WhenClauses.Count - 1; i >= 0; i--)
            {
                var valueCopy = value;
                var whenValue = whenClauses[i];
                var caseType = caseTypes[i];

                if (value.Type != caseType)
                    valueCopy = SqlTypeConverter.Convert(valueCopy, caseType);

                if (whenValue.Type != caseType)
                    whenValue = SqlTypeConverter.Convert(whenValue, type);

                var comparison = Expression.Equal(valueCopy, whenValue);
                var returnValue = thenClauses[i];

                if (returnValue.Type != type)
                    returnValue = SqlTypeConverter.Convert(returnValue, type);

                result = Expression.Condition(Expression.IsTrue(comparison), returnValue, result);
            }

            sqlType = type.ToSqlType();
            return result;
        }

        private static Expression ToExpression(this SearchedCaseExpression searchedCase, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            // Convert all the different elements to expressions
            var whenClauses = searchedCase.WhenClauses.Select(when => when.WhenExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _)).ToList();
            var thenClauses = searchedCase.WhenClauses.Select(when => when.ThenExpression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _)).ToList();
            var elseValue = searchedCase.ElseExpression?.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            // First pass to determine final return type
            Type type = null;

            for (var i = 0; i < thenClauses.Count; i++)
            {
                var thenType = thenClauses[i].Type;

                if (type == null)
                    type = thenType;
                else if (!SqlTypeConverter.CanMakeConsistentTypes(type, thenType, out type))
                    throw new NotSupportedQueryFragmentException($"Cannot determine return type", searchedCase);
            }

            if (elseValue != null)
            {
                var elseType = elseValue.Type;

                if (type == null)
                    type = elseType;
                else if (!SqlTypeConverter.CanMakeConsistentTypes(type, elseType, out type))
                    throw new NotSupportedQueryFragmentException($"Cannot determine return type", searchedCase);
            }

            // Second pass to build up the calculation. Do this in reverse so we can keep wrapping the previous expression in more conditions to
            // add the earlier cases
            Expression result = null;

            if (elseValue != null)
            {
                if (elseValue.Type != type)
                    elseValue = SqlTypeConverter.Convert(elseValue, type);

                result = elseValue;
            }
            else
            {
                result = Expression.Constant(SqlTypeConverter.GetNullValue(type));
            }

            for (var i = whenClauses.Count - 1; i >= 0; i--)
            {
                var whenValue = whenClauses[i];
                var returnValue = thenClauses[i];

                whenValue = SqlTypeConverter.Convert(whenValue, typeof(SqlBoolean));
                whenValue = Expression.IsTrue(whenValue);

                returnValue = SqlTypeConverter.Convert(returnValue, type);

                result = Expression.Condition(whenValue, returnValue, result);
            }

            sqlType = type.ToSqlType();
            return result;
        }

        private static Expression ToExpression(this BooleanNotExpression not, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            var value = not.Expression.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
            return Expression.Not(value);
        }

        private static readonly Dictionary<SqlDataTypeOption, Type> _typeMapping = new Dictionary<SqlDataTypeOption, Type>
        {
            [SqlDataTypeOption.BigInt] = typeof(SqlInt64),
            [SqlDataTypeOption.Binary] = typeof(SqlBinary),
            [SqlDataTypeOption.Bit] = typeof(SqlBoolean),
            [SqlDataTypeOption.Char] = typeof(SqlString),
            [SqlDataTypeOption.Date] = typeof(SqlDateTime),
            [SqlDataTypeOption.DateTime] = typeof(SqlDateTime),
            [SqlDataTypeOption.DateTime2] = typeof(SqlDateTime),
            [SqlDataTypeOption.DateTimeOffset] = typeof(SqlDateTime),
            [SqlDataTypeOption.Decimal] = typeof(SqlDecimal),
            [SqlDataTypeOption.Float] = typeof(SqlDouble),
            [SqlDataTypeOption.Image] = typeof(SqlBinary),
            [SqlDataTypeOption.Int] = typeof(SqlInt32),
            [SqlDataTypeOption.Money] = typeof(SqlMoney),
            [SqlDataTypeOption.NChar] = typeof(SqlString),
            [SqlDataTypeOption.NText] = typeof(SqlString),
            [SqlDataTypeOption.Numeric] = typeof(SqlDecimal),
            [SqlDataTypeOption.NVarChar] = typeof(SqlString),
            [SqlDataTypeOption.Real] = typeof(SqlSingle),
            [SqlDataTypeOption.SmallDateTime] = typeof(SqlDateTime),
            [SqlDataTypeOption.SmallInt] = typeof(SqlInt16),
            [SqlDataTypeOption.SmallMoney] = typeof(SqlMoney),
            [SqlDataTypeOption.Text] = typeof(SqlString),
            [SqlDataTypeOption.TinyInt] = typeof(SqlByte),
            [SqlDataTypeOption.UniqueIdentifier] = typeof(SqlGuid),
            [SqlDataTypeOption.VarBinary] = typeof(SqlBinary),
            [SqlDataTypeOption.VarChar] = typeof(SqlString),
            [SqlDataTypeOption.Sql_Variant] = typeof(object)
        };

        /// <summary>
        /// Converts a SQL <see cref="DataTypeReference"/> to the equivalent .NET <see cref="Type"/>
        /// </summary>
        /// <param name="type">The data type to convert</param>
        /// <param name="sqlDataType">If the <paramref name="type"/> is a <see cref="SqlDataTypeReference"/>, this is set to the cast value.</param>
        /// <returns>The equivalent .NET <see cref="Type"/></returns>
        public static Type ToNetType(this DataTypeReference type, out SqlDataTypeReference sqlDataType)
        {
            if (!(type is SqlDataTypeReference dataType))
            {
                if (type is UserDataTypeReference udt && udt.Name.BaseIdentifier.Value == typeof(SqlEntityReference).FullName)
                {
                    sqlDataType = null;
                    return typeof(SqlEntityReference);
                }

                throw new NotSupportedQueryFragmentException("Unsupported data type reference", type);
            }

            sqlDataType = dataType;

            if (!_typeMapping.TryGetValue(dataType.SqlDataTypeOption, out var targetType))
                throw new NotSupportedQueryFragmentException("Unknown type name", type);

            return targetType;
        }

        /// <summary>
        /// Checks if a type represents an exact numeric type
        /// </summary>
        /// <param name="type">The type to check</param>
        /// <returns><c>true</c> if the <paramref name="type"/> is an exact numeric type, or <c>false</c> otherwise</returns>
        public static bool IsExactNumeric(this SqlDataTypeOption type)
        {
            return type == SqlDataTypeOption.BigInt ||
                type == SqlDataTypeOption.Bit ||
                type == SqlDataTypeOption.Decimal ||
                type == SqlDataTypeOption.Int ||
                type == SqlDataTypeOption.Money ||
                type == SqlDataTypeOption.Numeric ||
                type == SqlDataTypeOption.SmallInt ||
                type == SqlDataTypeOption.SmallMoney ||
                type == SqlDataTypeOption.TinyInt;
        }

        /// <summary>
        /// Checks if a type represents an approximate numeric type
        /// </summary>
        /// <param name="type">The type to check</param>
        /// <returns><c>true</c> if the <paramref name="type"/> is an approximate numeric type, or <c>false</c> otherwise</returns>
        public static bool IsApproximateNumeric(this SqlDataTypeOption type)
        {
            return type == SqlDataTypeOption.Float ||
                type == SqlDataTypeOption.Real;
        }

        /// <summary>
        /// Checks if a type represents an exact or approximate numeric type
        /// </summary>
        /// <param name="type">The type to check</param>
        /// <returns><c>true</c> if the <paramref name="type"/> is an exact or approximate numeric type, or <c>false</c> otherwise</returns>
        public static bool IsNumeric(this SqlDataTypeOption type)
        {
            return IsExactNumeric(type) || IsApproximateNumeric(type);
        }

        /// <summary>
        /// Checks if a type represents a string
        /// </summary>
        /// <param name="type">The type to check</param>
        /// <returns><c>true</c> if the <paramref name="type"/> is a string type, or <c>false</c> otherwise</returns>
        public static bool IsStringType(this SqlDataTypeOption type)
        {
            return type == SqlDataTypeOption.Char ||
                type == SqlDataTypeOption.VarChar ||
                type == SqlDataTypeOption.NChar ||
                type == SqlDataTypeOption.NVarChar ||
                type == SqlDataTypeOption.Text ||
                type == SqlDataTypeOption.NText;
        }

        /// <summary>
        /// Gets the size of the data that can be stored in a SQL <see cref="DataTypeReference"/>
        /// </summary>
        /// <param name="type">The data type to get the size of</param>
        /// <returns>The size of the data type to report in <see cref="System.Data.IDataReader.GetSchemaTable"/></returns>
        public static int GetSize(this DataTypeReference type)
        {
            if (!(type is SqlDataTypeReference dataType))
            {
                if (type is UserDataTypeReference udt && udt.Name.BaseIdentifier.Value == typeof(SqlEntityReference).FullName)
                    dataType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.UniqueIdentifier };
                else
                    throw new NotSupportedQueryFragmentException("Unsupported data type reference", type);
            }

            switch (dataType.SqlDataTypeOption)
            {
                case SqlDataTypeOption.VarChar:
                case SqlDataTypeOption.NVarChar:
                case SqlDataTypeOption.VarBinary:
                case SqlDataTypeOption.Char:
                case SqlDataTypeOption.NChar:
                case SqlDataTypeOption.Binary:
                    if (dataType.Parameters.Count == 1 && dataType.Parameters[0] is IntegerLiteral length && Int32.TryParse(length.Value, out var lengthValue))
                        return lengthValue;
                    else if (dataType.Parameters.Count == 1 && dataType.Parameters[0] is MaxLiteral)
                        return Int32.MaxValue;
                    else
                        return 1;

                case SqlDataTypeOption.Text:
                case SqlDataTypeOption.NText:
                case SqlDataTypeOption.Image:
                    return Int32.MaxValue;
            }

            var netType = dataType.ToNetType(out _);
            netType = netType.GetProperty("Value")?.PropertyType ?? netType;

            if (netType == typeof(DateTime))
                return 8;

            return Marshal.SizeOf(netType);
        }

        /// <summary>
        /// Gets the precision of the data that can be stored in a SQL <see cref="DataTypeReference"/>
        /// </summary>
        /// <param name="type">The data type to get the size of</param>
        /// <returns>The number of digits that can be stored in the type</returns>
        public static int GetPrecision(this DataTypeReference type)
        {
            if (!(type is SqlDataTypeReference dataType))
                return 0;

            switch (dataType.SqlDataTypeOption)
            {
                case SqlDataTypeOption.Numeric:
                case SqlDataTypeOption.Decimal:
                    throw new NotImplementedException();
            }
        }

        /// <summary>
        /// Gets the scale of the data that can be stored in a SQL <see cref="DataTypeReference"/>
        /// </summary>
        /// <param name="type">The data type to get the size of</param>
        /// <returns>The number of digits that can be stored in the type after the decimal point</returns>
        public static int GetScale(this DataTypeReference type)
        {
            if (!(type is SqlDataTypeReference dataType))
                return 0;

            switch (dataType.SqlDataTypeOption)
            {
                case SqlDataTypeOption.Numeric:
                case SqlDataTypeOption.Decimal:
                    throw new NotImplementedException();
            }
        }

        private static readonly Dictionary<Type, DataTypeReference> _netTypeMapping = new Dictionary<Type, DataTypeReference>
        {
            [typeof(SqlInt64)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.BigInt },
            [typeof(SqlBinary)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Binary, Parameters = { new MaxLiteral() } },
            [typeof(SqlBoolean)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Bit },
            [typeof(SqlString)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.NVarChar, Parameters = { new MaxLiteral() } },
            [typeof(SqlDateTime)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.DateTime },
            [typeof(SqlDecimal)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Decimal },
            [typeof(SqlDouble)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Float },
            [typeof(SqlInt32)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Int },
            [typeof(SqlMoney)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Money },
            [typeof(SqlSingle)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Real },
            [typeof(SqlInt16)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.SmallInt },
            [typeof(SqlByte)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.TinyInt },
            [typeof(SqlGuid)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.UniqueIdentifier },
            [typeof(SqlEntityReference)] = new UserDataTypeReference { Name = new SchemaObjectName { Identifiers = { new Identifier { Value = typeof(SqlEntityReference).FullName } } } },
            [typeof(object)] = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Sql_Variant }
        };

        /// <summary>
        /// Converts a .NET <see cref="Type"/> to the equivalent SQL <see cref="DataTypeReference"/>
        /// </summary>
        /// <param name="type">The data type to convert</param>
        /// <returns>The equivalent SQL <see cref="DataTypeReference"/></returns>
        public static DataTypeReference ToSqlType(this Type type)
        {
            return _netTypeMapping[type];
        }

        private static Expression ToExpression(this ConvertCall convert, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            var value = convert.Parameter.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);
            var style = convert.Style?.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            sqlType = convert.DataType;
            return SqlTypeConverter.Convert(value, convert.DataType, style, convert);
        }

        private static Expression ToExpression(this CastCall cast, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            return ToExpression(new ConvertCall { Parameter = cast.Parameter, DataType = cast.DataType }, schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out sqlType);
        }

        private static readonly Regex _containsParser = new Regex("^\\S+( OR \\S+)*$", RegexOptions.IgnoreCase | RegexOptions.Compiled);

        private static Expression ToExpression(this FullTextPredicate fullText, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            // Only support simple CONTAINS calls to handle multi-select optionsets for now
            if (fullText.FullTextFunctionType != FullTextFunctionType.Contains)
                throw new NotSupportedQueryFragmentException("Unsupported full text predicate type", fullText) { Suggestion = "Only CONTAINS is currently supported for full text searching" };

            if (fullText.Columns.Count != 1)
                throw new NotSupportedQueryFragmentException("Only one column is currently supported for CONTAINS function", fullText);

            if (fullText.Columns[0].ColumnType == ColumnType.Wildcard)
                throw new NotSupportedQueryFragmentException("Only one column is currently supported for CONTAINS function", fullText);

            if (fullText.PropertyName != null)
                throw new NotSupportedQueryFragmentException("PROPERTY is not currently supported", fullText.PropertyName);

            if (fullText.LanguageTerm != null)
                throw new NotSupportedQueryFragmentException("LANGUAGE is not currently supported", fullText.LanguageTerm);

            var col = fullText.Columns[0].ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            if (!SqlTypeConverter.CanChangeTypeImplicit(col.Type, typeof(SqlString)))
                throw new NotSupportedQueryFragmentException("Only string columns are supported", fullText.Columns[0]);

            col = SqlTypeConverter.Convert(col, typeof(SqlString));
            sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.Bit };

            if (fullText.Value is StringLiteral lit)
            {
                if (!_containsParser.IsMatch(lit.Value))
                    throw new NotSupportedQueryFragmentException("Only simple \"word OR word OR word\" patterns are currently supported", lit);

                var words = GetContainsWords(lit.Value, true);
                return Expr.Call(() => Contains(Expr.Arg<SqlString>(), Expr.Arg<Regex[]>()), col, Expression.Constant(words));
            }

            var value = fullText.Value.ToExpression(schema, nonAggregateSchema, parameterTypes, entityParam, parameterParam, optionsParam, out _);

            if (!SqlTypeConverter.CanChangeTypeImplicit(value.Type, typeof(SqlString)))
                throw new NotSupportedQueryFragmentException($"Expected string value to match, got {value.Type}", fullText.Value);

            value = SqlTypeConverter.Convert(value, typeof(SqlString));

            return Expr.Call(() => Contains(Expr.Arg<SqlString>(), Expr.Arg<SqlString>()), col, value);
        }

        private static SqlBoolean Contains(SqlString col, SqlString value)
        {
            if (col.IsNull || value.IsNull)
                return false;

            var words = GetContainsWords(value.Value, false);
            return Contains(col, words);
        }

        private static SqlBoolean Contains(SqlString col, Regex[] words)
        {
            if (col.IsNull)
                return false;

            return words.Any(w => w.IsMatch(col.Value));
        }

        private static Regex[] GetContainsWords(string pattern, bool compile)
        {
            if (!_containsParser.IsMatch(pattern))
                throw new QueryExecutionException("Invalid CONTAINS pattern. Only simple \"word OR word OR word\" patterns are currently supported");

            var options = RegexOptions.IgnoreCase;
            if (compile)
                options |= RegexOptions.Compiled;

            var words = pattern.ToUpperInvariant().Split(new[] { " OR " }, StringSplitOptions.None);

            return words
                .Select(w => new Regex($@"\b{Regex.Escape(w)}\b", options))
                .ToArray();
        }

        private static Expression ToExpression(this ParameterlessCall parameterless, INodeSchema schema, INodeSchema nonAggregateSchema, IDictionary<string, DataTypeReference> parameterTypes, ParameterExpression entityParam, ParameterExpression parameterParam, ParameterExpression optionsParam, out DataTypeReference sqlType)
        {
            switch (parameterless.ParameterlessCallType)
            {
                case ParameterlessCallType.CurrentTimestamp:
                    sqlType = new SqlDataTypeReference { SqlDataTypeOption = SqlDataTypeOption.DateTime };
                    return Expr.Call(() => GetCurrentTimestamp(Expr.Arg<IQueryExecutionOptions>()), optionsParam);

                default:
                    sqlType = new UserDataTypeReference { Name = new SchemaObjectName { Identifiers = { new Identifier { Value = typeof(SqlEntityReference).FullName } } } };
                    return Expr.Call(() => GetCurrentUser(Expr.Arg<IQueryExecutionOptions>()), optionsParam);
            }
        }

        private static SqlDateTime GetCurrentTimestamp(IQueryExecutionOptions options)
        {
            if (options.UseLocalTimeZone)
                return new SqlDateTime(DateTime.Now);
            else
                return new SqlDateTime(DateTime.UtcNow);
        }

        private static SqlEntityReference GetCurrentUser(IQueryExecutionOptions options)
        {
            return new SqlEntityReference(options.PrimaryDataSource, "systemuser", options.UserId);
        }

        /// <summary>
        /// Removes a condition from a boolean expression
        /// </summary>
        /// <param name="expr">The full boolean expression</param>
        /// <param name="remove">The condition to remove</param>
        /// <returns>A version of the <paramref name="expr"/> with the expression removed</returns>
        public static BooleanExpression RemoveCondition(this BooleanExpression expr, BooleanExpression remove)
        {
            if (expr == remove)
                return null;

            if (expr is BooleanBinaryExpression binary)
            {
                if (binary.FirstExpression == remove)
                    return binary.SecondExpression;

                if (binary.SecondExpression == remove)
                    return binary.FirstExpression;

                var clone = new BooleanBinaryExpression
                {
                    BinaryExpressionType = binary.BinaryExpressionType,
                    FirstExpression = binary.FirstExpression.RemoveCondition(remove),
                    SecondExpression = binary.SecondExpression.RemoveCondition(remove)
                };

                return clone;
            }

            if (expr is BooleanParenthesisExpression paren)
            {
                if (paren.Expression == remove)
                    return null;

                return new BooleanParenthesisExpression { Expression = paren.Expression.RemoveCondition(remove) };
            }

            return expr;
        }

        /// <summary>
        /// Gets the name of a column
        /// </summary>
        /// <param name="col">A <see cref="ColumnReferenceExpression"/></param>
        /// <returns>The name of the column being referenced</returns>
        public static string GetColumnName(this ColumnReferenceExpression col)
        {
            return String.Join(".", col.MultiPartIdentifier.Identifiers.Select(id => id.Value));
        }

        /// <summary>
        /// Gets a list of columns referenced in an expression
        /// </summary>
        /// <param name="fragment">The expression to get the list of columns from</param>
        /// <returns>A list of column names referenced in the <paramref name="fragment"/></returns>
        public static IEnumerable<string> GetColumns(this TSqlFragment fragment)
        {
            var visitor = new ColumnCollectingVisitor();
            fragment.Accept(visitor);

            return visitor.Columns
                .Where(col => col.ColumnType == ColumnType.Regular)
                .Select(col => col.GetColumnName())
                .Distinct();
        }

        /// <summary>
        /// Gets a list of variables referenced in an expression
        /// </summary>
        /// <param name="fragment">The expression to get the list of variables from</param>
        /// <returns>A list of variable names referenced in the <paramref name="fragment"/></returns>
        public static IEnumerable<string> GetVariables(this TSqlFragment fragment)
        {
            var visitor = new VariableCollectingVisitor();
            fragment.Accept(visitor);

            return visitor.Variables
                .Select(var => var.Name)
                .Distinct();
        }

        /// <summary>
        /// Parses a column name into a <see cref="ColumnReferenceExpression"/>
        /// </summary>
        /// <param name="colName">The column name to parse</param>
        /// <returns>An equivalent <see cref="ColumnReferenceExpression"/></returns>
        public static ColumnReferenceExpression ToColumnReference(this string colName)
        {
            var col = new ColumnReferenceExpression { MultiPartIdentifier = new MultiPartIdentifier() };

            foreach (var part in colName.Split('.'))
                col.MultiPartIdentifier.Identifiers.Add(new Identifier { Value = part });

            return col;
        }

        /// <summary>
        /// Checks if an expression has a constant value
        /// </summary>
        /// <param name="expr">The expression to check</param>
        /// <param name="schema">The schema that the expression is evaluated in</param>
        /// <param name="literal">The equivalent literal value</param>
        /// <returns><c>true</c> if the expression has a constant value, or <c>false</c> if it can change depending on the current data record</returns>
        public static bool IsConstantValueExpression(this ScalarExpression expr, INodeSchema schema, IQueryExecutionOptions options, out Literal literal)
        {
            literal = expr as Literal;

            if (literal != null)
                return true;

            var columnVisitor = new ColumnCollectingVisitor();
            expr.Accept(columnVisitor);

            if (columnVisitor.Columns.Count > 0)
                return false;

            var variableVisitor = new VariableCollectingVisitor();
            expr.Accept(variableVisitor);

            if (variableVisitor.Variables.Count > 0 || variableVisitor.GlobalVariables.Count > 0)
                return false;

            var parameterlessVisitor = new ParameterlessCollectingVisitor();
            expr.Accept(parameterlessVisitor);

            if (parameterlessVisitor.ParameterlessCalls.Any(p => p.ParameterlessCallType != ParameterlessCallType.CurrentTimestamp))
                return false;

            var value = expr.Compile(schema, null)(null, null, options);

            if (value == null || value is INullable n && n.IsNull)
                literal = new NullLiteral();
            else if (value is SqlInt32 i)
                literal = new IntegerLiteral { Value = i.ToString() };
            else if (value is SqlDecimal dec)
                literal = new NumericLiteral { Value = dec.ToString() };
            else if (value is SqlDouble dbl)
                literal = new NumericLiteral { Value = dbl.ToString() };
            else if (value is SqlSingle flt)
                literal = new RealLiteral { Value = flt.ToString() };
            else if (value is SqlString str)
                literal = new StringLiteral { Value = str.ToString() };
            else if (value is SqlDateTime dt)
                literal = new StringLiteral { Value = dt.Value.ToString("yyyy-MM-ddTHH:mm:ss.fff") };
            else if (value is SqlGuid g)
                literal = new StringLiteral { Value = g.ToString() };
            else
                return false;

            return true;
        }
    }
}
